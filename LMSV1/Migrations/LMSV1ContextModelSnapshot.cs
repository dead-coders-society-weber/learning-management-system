// <auto-generated />
using System;
using LMSV1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LMSV1.Migrations
{
    [DbContext(typeof(LMSV1Context))]
    partial class LMSV1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LMSV1.Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AssignmentID");

                    b.HasIndex("CourseID");

                    b.ToTable("Assignment", (string)null);

                    b.HasData(
                        new
                        {
                            AssignmentID = 1,
                            CourseID = 3750,
                            Description = "This is a File Upload assignment test that is turned in and graded.",
                            DueDate = new DateTime(2023, 11, 3, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            MaxPoints = 100,
                            SubmissionType = 0,
                            Title = "File Assignment 1"
                        },
                        new
                        {
                            AssignmentID = 3,
                            CourseID = 3750,
                            Description = "This is an assignment that is past due, but one student has no submission.",
                            DueDate = new DateTime(2023, 11, 8, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            MaxPoints = 100,
                            SubmissionType = 0,
                            Title = "File Assignment 2"
                        },
                        new
                        {
                            AssignmentID = 5,
                            CourseID = 3750,
                            Description = "This is an assignment that needs a File Upload and is not yet due.",
                            DueDate = new DateTime(2023, 11, 11, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            MaxPoints = 200,
                            SubmissionType = 0,
                            Title = "File Assignment 3"
                        },
                        new
                        {
                            AssignmentID = 2,
                            CourseID = 3750,
                            Description = "This is a Text entry assignment test that is turned in and graded.",
                            DueDate = new DateTime(2023, 11, 5, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            MaxPoints = 100,
                            SubmissionType = 1,
                            Title = "Text Assignment 1"
                        },
                        new
                        {
                            AssignmentID = 4,
                            CourseID = 3750,
                            Description = "This is an assignment that is past due, but one student has no submission.",
                            DueDate = new DateTime(2023, 11, 8, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            MaxPoints = 100,
                            SubmissionType = 1,
                            Title = "Text Assignment 2"
                        },
                        new
                        {
                            AssignmentID = 6,
                            CourseID = 3750,
                            Description = "This is an assignment that needs a Text entry and is not yet due.",
                            DueDate = new DateTime(2023, 11, 12, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            MaxPoints = 150,
                            SubmissionType = 1,
                            Title = "Text Assignment 3"
                        });
                });

            modelBuilder.Entity("LMSV1.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeetDays")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("InstructorID");

                    b.ToTable("Course", (string)null);

                    b.HasData(
                        new
                        {
                            CourseID = 3750,
                            Credits = 4,
                            DepartmentID = "CS",
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            InstructorID = 1,
                            Location = "Weber NB - 324",
                            MeetDays = 5,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Title = "Software Development II"
                        },
                        new
                        {
                            CourseID = 4801,
                            Credits = 3,
                            DepartmentID = "CS",
                            EndTime = new TimeSpan(0, 15, 30, 0, 0),
                            InstructorID = 3,
                            Location = "Tech Hall - 101",
                            MeetDays = 10,
                            StartTime = new TimeSpan(0, 14, 0, 0, 0),
                            Title = "Advanced Algorithms"
                        },
                        new
                        {
                            CourseID = 5302,
                            Credits = 4,
                            DepartmentID = "MATH",
                            EndTime = new TimeSpan(0, 11, 15, 0, 0),
                            InstructorID = 1,
                            Location = "Math Building - 205",
                            MeetDays = 21,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Title = "Linear Algebra"
                        },
                        new
                        {
                            CourseID = 3775,
                            Credits = 3,
                            DepartmentID = "HIST",
                            EndTime = new TimeSpan(0, 14, 30, 0, 0),
                            InstructorID = 1,
                            Location = "History Hall - 330",
                            MeetDays = 10,
                            StartTime = new TimeSpan(0, 13, 0, 0, 0),
                            Title = "Modern World History"
                        },
                        new
                        {
                            CourseID = 4020,
                            Credits = 3,
                            DepartmentID = "ENGL",
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            InstructorID = 3,
                            Location = "Literature Dept - 210",
                            MeetDays = 20,
                            StartTime = new TimeSpan(0, 9, 30, 0, 0),
                            Title = "Shakespearean Literature"
                        },
                        new
                        {
                            CourseID = 4550,
                            Credits = 4,
                            DepartmentID = "ART",
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            InstructorID = 3,
                            Location = "Art Studio - 120",
                            MeetDays = 9,
                            StartTime = new TimeSpan(0, 15, 0, 0, 0),
                            Title = "Contemporary Art Practices"
                        });
                });

            modelBuilder.Entity("LMSV1.Models.Department", b =>
                {
                    b.Property<string>("DepartmentID")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Department", (string)null);

                    b.HasData(
                        new
                        {
                            DepartmentID = "CS",
                            Name = "Computer Science"
                        },
                        new
                        {
                            DepartmentID = "MATH",
                            Name = "Mathematics"
                        },
                        new
                        {
                            DepartmentID = "HIST",
                            Name = "History"
                        },
                        new
                        {
                            DepartmentID = "ENGL",
                            Name = "English"
                        },
                        new
                        {
                            DepartmentID = "ART",
                            Name = "Art"
                        });
                });

            modelBuilder.Entity("LMSV1.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("GradePercentage")
                        .HasColumnType("float");

                    b.Property<double?>("PointsEarned")
                        .HasColumnType("float");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("Enrollment", (string)null);

                    b.HasData(
                        new
                        {
                            EnrollmentID = 1,
                            CourseID = 3750,
                            EnrollmentDate = new DateTime(2023, 11, 14, 21, 23, 41, 919, DateTimeKind.Local).AddTicks(3700),
                            Grade = "A+",
                            GradePercentage = 100.0,
                            PointsEarned = 400.0,
                            StudentID = 2
                        },
                        new
                        {
                            EnrollmentID = 2,
                            CourseID = 3750,
                            EnrollmentDate = new DateTime(2023, 11, 14, 21, 23, 41, 919, DateTimeKind.Local).AddTicks(3877),
                            Grade = "C+",
                            GradePercentage = 78.799999999999997,
                            PointsEarned = 315.0,
                            StudentID = 4
                        },
                        new
                        {
                            EnrollmentID = 3,
                            CourseID = 3750,
                            EnrollmentDate = new DateTime(2023, 11, 14, 21, 23, 41, 919, DateTimeKind.Local).AddTicks(3880),
                            Grade = "E",
                            GradePercentage = 18.800000000000001,
                            PointsEarned = 75.0,
                            StudentID = 5
                        });
                });

            modelBuilder.Entity("LMSV1.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<int>("AssignmentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Event")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("AssignmentID");

                    b.HasIndex("StudentID");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("LMSV1.Models.Submission", b =>
                {
                    b.Property<int>("SubmissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionID"));

                    b.Property<int?>("AssignmentID")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextSubmission")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SubmissionID");

                    b.HasIndex("AssignmentID");

                    b.HasIndex("UserID");

                    b.ToTable("Submission", (string)null);

                    b.HasData(
                        new
                        {
                            SubmissionID = 1,
                            AssignmentID = 1,
                            FileName = "2_test submission.txt",
                            Score = 100.0,
                            SubmissionDate = new DateTime(2023, 11, 14, 21, 23, 41, 919, DateTimeKind.Local).AddTicks(5024),
                            UserID = 2
                        },
                        new
                        {
                            SubmissionID = 2,
                            AssignmentID = 1,
                            FileName = "4_test submission.txt",
                            Score = 75.0,
                            SubmissionDate = new DateTime(2023, 11, 14, 21, 23, 41, 919, DateTimeKind.Local).AddTicks(5035),
                            UserID = 4
                        },
                        new
                        {
                            SubmissionID = 3,
                            AssignmentID = 1,
                            FileName = "5_test submission.txt",
                            Score = 25.0,
                            SubmissionDate = new DateTime(2023, 11, 14, 21, 23, 41, 919, DateTimeKind.Local).AddTicks(5037),
                            UserID = 5
                        },
                        new
                        {
                            SubmissionID = 4,
                            AssignmentID = 3,
                            FileName = "2_test submission2.txt",
                            Score = 100.0,
                            SubmissionDate = new DateTime(2023, 11, 14, 21, 23, 41, 919, DateTimeKind.Local).AddTicks(5047),
                            UserID = 2
                        },
                        new
                        {
                            SubmissionID = 5,
                            AssignmentID = 3,
                            FileName = "4_test submission2.txt",
                            Score = 75.0,
                            SubmissionDate = new DateTime(2023, 11, 14, 21, 23, 41, 919, DateTimeKind.Local).AddTicks(5050),
                            UserID = 4
                        },
                        new
                        {
                            SubmissionID = 6,
                            AssignmentID = 2,
                            Score = 100.0,
                            SubmissionDate = new DateTime(2023, 11, 14, 21, 23, 41, 919, DateTimeKind.Local).AddTicks(5058),
                            TextSubmission = "Here is some text.",
                            UserID = 2
                        },
                        new
                        {
                            SubmissionID = 7,
                            AssignmentID = 2,
                            Score = 90.0,
                            SubmissionDate = new DateTime(2023, 11, 14, 21, 23, 41, 919, DateTimeKind.Local).AddTicks(5061),
                            TextSubmission = "Here is some text.",
                            UserID = 4
                        },
                        new
                        {
                            SubmissionID = 8,
                            AssignmentID = 2,
                            Score = 50.0,
                            SubmissionDate = new DateTime(2023, 11, 14, 21, 23, 41, 919, DateTimeKind.Local).AddTicks(5065),
                            TextSubmission = "Here is some text.",
                            UserID = 5
                        },
                        new
                        {
                            SubmissionID = 9,
                            AssignmentID = 4,
                            Score = 100.0,
                            SubmissionDate = new DateTime(2023, 11, 14, 21, 23, 41, 919, DateTimeKind.Local).AddTicks(5068),
                            TextSubmission = "Here is some text.",
                            UserID = 2
                        },
                        new
                        {
                            SubmissionID = 10,
                            AssignmentID = 4,
                            Score = 75.0,
                            SubmissionDate = new DateTime(2023, 11, 14, 21, 23, 41, 919, DateTimeKind.Local).AddTicks(5071),
                            TextSubmission = "Here is some text.",
                            UserID = 4
                        });
                });

            modelBuilder.Entity("LMSV1.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TuitionAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateTime(1995, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "15be1cdd-203b-4bf9-bec7-461b8933103d",
                            Email = "Instructor1@gmail.com",
                            FirstName = "John",
                            LastName = "Doe",
                            NormalizedEmail = "INSTRUCTOR1@GMAIL.COM",
                            NormalizedUserName = "INSTRUCTOR1@GMAIL.COM",
                            Password = "Abc123!",
                            PasswordHash = "AQAAAAIAAYagAAAAEHNlS+DRqXKgPH4CgKow+DO9nsH01UD/Div+T8vTUNx9pQmJnE7YVqDQCt2j3Cwv7w==",
                            ProfileImage = "/Uploads/stock-profile-image.jpg",
                            Role = "Instructor",
                            SecurityStamp = "37458cf7-5ee1-4197-b8b7-afb726c203df",
                            TuitionAmount = 0L,
                            UserName = "Instructor1@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateTime(1995, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2822b6e9-3fa9-479d-9c8d-a8dbf5cfbc65",
                            Email = "Student1@gmail.com",
                            FirstName = "John",
                            LastName = "Doe",
                            NormalizedEmail = "STUDENT1@GMAIL.COM",
                            NormalizedUserName = "STUDENT1@GMAIL.COM",
                            Password = "Abc123!",
                            PasswordHash = "AQAAAAIAAYagAAAAEDFOjlIX5WcHFT5flqsfZkRFKuq0pL5K0G3kVWaT59j7V7KzDzdwKXGrs/6snc2WCA==",
                            ProfileImage = "/Uploads/stock-profile-image.jpg",
                            Role = "Student",
                            SecurityStamp = "708f47d3-80fd-48d1-b5f3-ad2367315069",
                            TuitionAmount = 400L,
                            UserName = "Student1@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            Birthdate = new DateTime(1995, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f2cc6c7d-c258-4551-9326-46f93f674e71",
                            Email = "Instructor2@gmail.com",
                            FirstName = "John2",
                            LastName = "Doe",
                            NormalizedEmail = "INSTRUCTOR2@GMAIL.COM",
                            NormalizedUserName = "INSTRUCTOR2@GMAIL.COM",
                            Password = "Abc123!",
                            PasswordHash = "AQAAAAIAAYagAAAAEHH9BErObyxIZYOrsn8/va7Cgi/j1UMyewGVfEzi6HATlXaMhmAbJFWMxUHYEGxafg==",
                            ProfileImage = "/Uploads/stock-profile-image.jpg",
                            Role = "Instructor",
                            SecurityStamp = "310e45c4-e4b9-4239-8836-d20e19cdc48d",
                            TuitionAmount = 0L,
                            UserName = "Instructor2@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            Birthdate = new DateTime(1995, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9d96451e-b2b1-4c42-9d2d-0f0b2396f57a",
                            Email = "Student4@gmail.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            NormalizedEmail = "STUDENT4@GMAIL.COM",
                            NormalizedUserName = "STUDENT4@GMAIL.COM",
                            Password = "Abc123!",
                            PasswordHash = "AQAAAAIAAYagAAAAEM/3tKsrtEFhtStM1sb6wBint5FLoQmOkHtvC9qMnnCphwy3IMHpgawTt+cT15KXoQ==",
                            ProfileImage = "/Uploads/stock-profile-image.jpg",
                            Role = "Student",
                            SecurityStamp = "f756aca9-4d13-4365-b183-eb4de8529462",
                            TuitionAmount = 400L,
                            UserName = "Student4@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            Birthdate = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b86ef5d8-a330-48ee-8784-14bf5351c2f1",
                            Email = "Student5@gmail.com",
                            FirstName = "Johnathan",
                            LastName = "Doe",
                            NormalizedEmail = "STUDENT5@GMAIL.COM",
                            NormalizedUserName = "STUDENT5@GMAIL.COM",
                            Password = "Abc123!",
                            PasswordHash = "AQAAAAIAAYagAAAAEFYZDB+Z3E9u9xv6Tuv0A5CZiowBcYqVBGgKGli7TTk9PxhUrEAxXSD408wMCyox/g==",
                            ProfileImage = "/Uploads/stock-profile-image.jpg",
                            Role = "Student",
                            SecurityStamp = "928b0e46-f600-489e-b0ce-66018feecff5",
                            TuitionAmount = 400L,
                            UserName = "Student5@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("LMSV1.Models.Assignment", b =>
                {
                    b.HasOne("LMSV1.Models.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LMSV1.Models.Course", b =>
                {
                    b.HasOne("LMSV1.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSV1.Models.User", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("LMSV1.Models.Enrollment", b =>
                {
                    b.HasOne("LMSV1.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSV1.Models.User", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LMSV1.Models.Notification", b =>
                {
                    b.HasOne("LMSV1.Models.Assignment", "Assignment")
                        .WithMany("Notifications")
                        .HasForeignKey("AssignmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSV1.Models.User", "Student")
                        .WithMany("Notifications")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LMSV1.Models.Submission", b =>
                {
                    b.HasOne("LMSV1.Models.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentID");

                    b.HasOne("LMSV1.Models.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("LMSV1.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("LMSV1.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSV1.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("LMSV1.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMSV1.Models.Assignment", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("LMSV1.Models.Course", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("LMSV1.Models.Department", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("LMSV1.Models.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Enrollments");

                    b.Navigation("Notifications");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
