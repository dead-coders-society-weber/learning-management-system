@page "{id:int}"
@model LMSV1.Pages.Courses.Assignments.AssignmentHomeModel
@using Microsoft.AspNetCore.Identity
@using LMSV1.Models
<!--This line below was added for test purposes with the file submission-->
@using (Html.BeginForm("SendMessage", "MessageController", FormMethod.Post))

@addTagHelper*, Microsoft.AspNetCore.Mvc.TagHelpers
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@{
    ViewData["Title"] = "Details";
    ViewData["Assignment"] = "Assignment";
    var user = await UserManager.GetUserAsync(User);
}

@*<h1>@Model.Assignment.CourseID Assignment - @Model.Assignment.Title</h1>*@

<div>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.Assignments.Title)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.Assignments.Title)</dd>
        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.Assignments.Description)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.Assignments.Description)</dd>
        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.Assignments.MaxPoints)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.Assignments.MaxPoints)</dd>
        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.Assignments.DueDate)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.Assignments.DueDate)</dd>
        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.Assignments.CourseID)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.Assignments.CourseID)</dd>
        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.Submissions.Score)</dt>
        @if (Model.Submissions != null && Model.Submissions.Score != null)
        {
            <dd class="col-sm-10">@Html.DisplayFor(model => model.Submissions.Score)</dd>
        }
        else
        {
            <dd class="col-sm-10"><b>Not Yet Graded.</b></dd>
        }
    </dl>
</div>

@if (await UserManager.IsInRoleAsync(user, "Student"))
{
@* <<<<<<< HEAD *@
    @if (Model.Assignments.DueDate > DateTime.Now)
    {
        <a asp-page="./Submissions/Submit" asp-route-Assignmentid="@Model.Assignments.AssignmentID" asp-route-UserID="@user.Id"><b>Submit Assignment</b></a>
    } 
    else
    {
        <h5>This assignment is locked. No more submissions can be made past the due date.</h5>
    }
    <div>
        <br />
    </div>
    @* ======= *@

    @if (Model.Submissions != null)
    {
        //Used to keep track of the score locally and the number of submitted attempts to find the average score
        double? score = 0.0;
        int? attempt = 0;
        var item = Model.Submissions;

        <h6>New attempt submitted</h6>
        <!--If the users attempt has been graded it will show otherwise it will inform the student it has not yet been graded-->
        @if (item.Score != null)
        {
            <p>
                Score for this attempt:
                @Html.DisplayFor(modelItem => item.Score)
            </p>
            score += item.Score;
            attempt += 1;

        }
        else
        {
            <p>THIS ATTEMPT HAS NOT YET BEEN GRADED</p>
        }

        //This takes the average score and displays it at the bottom of the page
        double? finalScore = score / attempt;
        <h6>Final Score: </h6>
        <p>@finalScore</p>
    }
    

   @*  //Start of pie chart code this is what needs to be done to get the values to work correctly
       with the pie chart but javascript wont recognize the c# code
    var scoreA = 0;
    var scoreB = 0;
    var scoreC = 0;
    var scoreD = 0;
    var scoreF = 0;

    @foreach (var points in Model.SubmissionGrade)
    {
        if (points.Score >= 90)
        {
            scoreA += 1;
        }
        if (points.Score >= 80 && points.Score <= 89.9)
        {
            scoreB += 1;
        }
        if (points.Score >= 70 && points.Score <= 79.9)
        {
            scoreC += 1;
        }
        if (points.Score >= 60 && points.Score <= 69.9)
        {
            scoreD += 1;
        }
        if (points.Score <= 59.9)
        {
            scoreF += 1;
        }
    } *@
    <!--Pie Chart to display for students only-->
    
        <!--Load the AJAX API-->
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript">

            // Load the Visualization API and the corechart package.
            google.charts.load('current', { 'packages': ['corechart'] });

            // Set a callback to run when the Google Visualization API is loaded.
            google.charts.setOnLoadCallback(drawChart);

            //To pass the variables into the pie chart another function is made here
            function GradeA() 
            {
                //This value passes through the function when hard coded but the foreach is not recognized
                var scoreA = 5;
                
                //Here is the problem we need this code translated to where javascript can recognize it
               @* @foreach (var points in Model.SubmissionGrade)
                {

                    if (points.Score >= 90)
                    {
                        scoreA += 1;
                    }
                 }*@
                 return scoreA;
            }

            // Callback that creates and populates a data table,
            // instantiates the pie chart, passes in the data and
            // draws it.
            function drawChart() {

                // Create the data table.
                var data = new google.visualization.DataTable();
                data.addColumn('string', 'LetterGrade');
                data.addColumn('number', 'GradeAmounts');
                data.addRows([
                    ['A', GradeA()],
                    ['B', 1],
                    ['C', 1],
                    ['D', 1],
                    ['F', 2]
                ]);

                // Set chart options
                var options = {
                    'title': 'Class Average For This Assignment',
                    'width': 500,
                    'height': 400
                };

                // Instantiate and draw our chart, passing in some options.
                var chart = new google.visualization.PieChart(document.getElementById('chart_div'));
                chart.draw(data, options);
            }
        </script>
    

    <body>
        <!--Div that will hold the pie chart-->
        <div id="chart_div"></div>
    </body>
    
    
@* >>>>>>> 50123b490868ca4a2a912633261783ebf44e2cd0 *@
}

@if (await UserManager.IsInRoleAsync(user, "Instructor"))
{
    <div>
        <a asp-page="./AssignmentEdit" asp-route-id="@Model.Assignments.AssignmentID">Edit</a> |
        <a asp-page="../CourseHome" asp-route-id="@Model.Assignments.CourseID">Back to Course</a>
    </div>
}

